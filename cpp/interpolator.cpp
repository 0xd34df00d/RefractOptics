/**********************************************************************
 * Regression and stability estimation.
 * Copyright (C) 2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "interpolator.h"
#include <algorithm>

std::ostream& PrintCoeffs (std::ostream& ostr, const std::vector<double>& coeffs)
{
	bool first = true;
	for (size_t i = 0; i < coeffs.size (); ++i)
	{
		if (!first)
			ostr << " + ";

		first = false;
		ostr << coeffs [i] << " * x^" << (coeffs.size () - i - 1);
	}
	return ostr;
}

namespace
{
	template<typename Iter>
	double GenSet (size_t size, Iter begin, Iter end)
	{
		if (!size || std::distance (begin, end) < size)
			return 1;

		if (size == 1)
			return std::accumulate (begin, end, 0);

		double result {};

		for (auto i = begin; i != end - size + 1; ++i)
			result += *i * GenSet (size - 1, i + 1, end);

		return result;
	}

	std::vector<double> GetLNumeratorCoeffs (const TrainingSet_t& points, size_t idx)
	{
		std::vector<double> xs;
		for (size_t i = 0; i < points.size (); ++i)
			if (i != idx)
				xs.push_back (- points [i].first (0));

		std::vector<double> result;
		for (size_t i = 0; i < points.size (); ++i)
			result.push_back (GenSet (i, xs.cbegin (), xs.cend ()));
		return result;
	}
}

Interpolator::Interpolator (const TrainingSet_t& points)
: Result_ (points.size ())
{
	for (size_t i = 0; i < points.size (); ++i)
	{
		const auto xi = points [i].first (0);
		const auto yi = points [i].second;

		double denom = 1;
		for (size_t j = 0; j < points.size (); ++j)
			if (j != i)
				denom *= xi - points [j].first (0);

		const auto& coeffs = GetLNumeratorCoeffs (points, i);
		for (size_t i = 0; i < Result_.size (); ++i)
			Result_ [i] += coeffs [i] * yi / denom;
	}
}

const std::vector<double>& Interpolator::GetResult () const
{
	return Result_;
}
