/**********************************************************************
 * Regression and stability estimation.
 * Copyright (C) 2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include "defs.h"

namespace Models
{
class Series
{
public:
	static constexpr size_t ParamsCount = 3;

	static std::array<DType_t, ParamsCount> initial ();

	static DType_t residual (const std::pair<SampleType_t<>, DType_t>& data, const Params_t<ParamsCount>& p);

	static Params_t<ParamsCount> residualDer (const std::pair<SampleType_t<>, DType_t>& data, const Params_t<ParamsCount>& p);

	static SampleType_t<> varsDer (const std::pair<SampleType_t<>, DType_t>& data, const Params_t<ParamsCount>& p);

	static TrainingSet_t<> preprocess (const TrainingSet_t<>& srcPts);
};

class Laser
{
	static constexpr auto L = 150.0;
public:
	static constexpr size_t ParamsCount = 3;

	static std::array<DType_t, ParamsCount> initial ();

	static DType_t residual (const std::pair<SampleType_t<2>, DType_t>& data, const Params_t<ParamsCount>& p);

	static Params_t<ParamsCount> residualDer (const std::pair<SampleType_t<2>, DType_t>& data, const Params_t<ParamsCount>& p);

	static SampleType_t<> varsDer (const std::pair<SampleType_t<2>, DType_t>& data, const Params_t<ParamsCount>& p);

	static TrainingSet_t<2> preprocess (const TrainingSet_t<>& srcPts);
};

class Resonance
{
public:
	static constexpr size_t ParamsCount = 3;

	double residual (const std::pair<SampleType_t<>, double>& data, const Params_t<ParamsCount>& p);

	Params_t<ParamsCount> residualDer (const std::pair<SampleType_t<>, double>& data, const Params_t<ParamsCount>& p);
};
}
