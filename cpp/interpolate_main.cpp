/**********************************************************************
 * Regression and stability estimation.
 * Copyright (C) 2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "interpolator.h"
#include <vector>

double Value (const std::vector<double>& coeffs, double x)
{
	double result = 0;
	for (size_t i = 0; i < coeffs.size (); ++i)
		result += coeffs [i] * std::pow (x, coeffs.size () - i - 1);
	return result;
}

bool Test (const std::vector<double>& coeffs)
{
	std::cout << "*** testing\t\t";
	PrintCoeffs (std::cout, coeffs) << "...\t\t\t";

	TrainingSet_t set;
	auto add = [&set] (double x, double y)
	{
		SampleType_t t;
		t (0) = x;
		set.push_back ({ t, y });
	};

	for (size_t i = 0; i < coeffs.size (); ++i)
		add (i, Value (coeffs, i));

	Interpolator ip { set };
	const auto& res = ip.GetResult ();
	for (size_t i = 0; i < coeffs.size (); ++i)
	{
		if (std::abs (coeffs [i] - res [i]) <= 1e-10)
			continue;

		std::cout << "[ Fail ]" << std::endl;
		std::cout << "\tExpected: ";
		PrintCoeffs (std::cout, coeffs) << std::endl;
		std::cout << "\tGot:      ";
		PrintCoeffs (std::cout, res) << std::endl;

		return false;
	}

	std::cout << "[ OK ]" << std::endl;

	return true;
}

int main (int argc, char **argv)
{
	Test ({ 1, 0, 0 });
	Test ({ 3, 2, 4 });
	Test ({ 1, 0, 0, 0 });
	Test ({ 1, 0, 0, 10 });
	Test ({ 2, 3, 2, 0 });
	Test ({ 2, 3, 2, 10 });
	return 0;
}
